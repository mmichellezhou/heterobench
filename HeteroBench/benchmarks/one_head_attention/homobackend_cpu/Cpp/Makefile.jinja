CXX := {{ compiler }}
CXXFLAGS := {{ cxxflags }}
LDFLAGS := {{ ldflags }}
OPENMP_LIBS := {{ openmp_libs }}

# input path
INPUT_PATH := {{ input }}

# output path
OUTPUT_PATH := {{ output }}

# iteration_times
ITERATIONS := {{ iteration_times }}
# batch_size
BATCH_SIZE := {{ batch_size }}
# N
N := {{ N }}
# d
D := {{ d }}

# Project names
TARGET_EXEC := {{ target }}_sw
TARGET_EXEC_SIMPLE := {{ target }}_sw_simple

# Source files
SOURCES := {{ sources }}
SOURCES_SIMPLE := {{ sources_simple }}

# MACRO DEFINITION
MACRO := -DITERATIONS=$(ITERATIONS) \
	-DBATCH_SIZE=$(BATCH_SIZE) \
	-DN=$(N) \
	-DD=$(D)

# CPU Source files
CPU_SOURCES := {{ cpu_sources }}
CPU_SOURCES_OPT := {{ cpu_sources_opt }}

# Object files
OBJECTS := $(SOURCES:.cpp=.o)
OBJECTS_SIMPLE := $(SOURCES_SIMPLE:.cpp=.o)
CPU_OBJECTS := $(CPU_SOURCES:.cpp=.o)
CPU_OBJECTS_OPT := $(CPU_SOURCES_OPT:.cpp=.o)

# Include directories
INCLUDE_DIRS := cpu_impl/include .
INCLUDE_DIRS_SIMPLE := cpu_impl/include cpu_impl_optimized/include .
INCLUDE_PARAMS := $(addprefix -I, $(INCLUDE_DIRS))
INCLUDE_PARAMS_SIMPLE := $(addprefix -I, $(INCLUDE_DIRS_SIMPLE))

# MKL support
ifeq ($(USE_MKL),1)
ifndef MKLROOT
$(error MKLROOT is not set. Please source the Intel oneAPI environment (e.g., source /opt/intel/oneapi/setvars.sh))
endif
CXXFLAGS += -DMKL_ILP64 -I$(MKLROOT)/include
LDFLAGS += -L$(MKLROOT)/lib/intel64 -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl
endif

# Default target
all: $(TARGET_EXEC) $(TARGET_EXEC_SIMPLE)

$(TARGET_EXEC): $(OBJECTS) $(CPU_OBJECTS)
	$(CXX) $(LDFLAGS) -o $@ $^ $(OPENMP_LIBS)

$(TARGET_EXEC_SIMPLE): $(OBJECTS_SIMPLE) $(CPU_OBJECTS) $(CPU_OBJECTS_OPT)
	$(CXX) $(LDFLAGS) -o $@ $^ $(OPENMP_LIBS)

main.o: main.cpp
	$(CXX) $(CXXFLAGS) $(MACRO) $(INCLUDE_PARAMS) -c $< -o $@

main_simple.o: main_simple.cpp
	$(CXX) $(CXXFLAGS) $(MACRO) $(INCLUDE_PARAMS_SIMPLE) -c $< -o $@

# To compile other CPU source files
cpu_impl/%.o: cpu_impl/%.cpp
	$(CXX) $(CXXFLAGS) $(MACRO) $(INCLUDE_PARAMS) -c $< -o $@

# To compile optimized CPU source files
cpu_impl_optimized/%.o: cpu_impl_optimized/%.cpp
	$(CXX) $(CXXFLAGS) $(MACRO) $(INCLUDE_PARAMS_SIMPLE) -c $< -o $@

# Run
run: $(TARGET_EXEC)
	{{ profiling_tool }} ./$(TARGET_EXEC) $(INPUT_PATH) $(OUTPUT_PATH)

run_simple: $(TARGET_EXEC_SIMPLE)
	{{ profiling_tool }} ./$(TARGET_EXEC_SIMPLE) $(INPUT_PATH) $(OUTPUT_PATH)

# Clean up
clean:
	rm -f $(TARGET_EXEC) $(TARGET_EXEC_SIMPLE) $(OBJECTS) $(OBJECTS_SIMPLE) $(CPU_OBJECTS) $(CPU_OBJECTS_OPT)

.PHONY: all clean run run_simple help

help:
	@echo "Usage: make [all|clean|run|run_simple|help]"
	@echo "  all:        Build both original and simple versions"
	@echo "  clean:      Clean up the project"
	@echo "  run:        Run the original version"
	@echo "  run_simple: Run the simple version with both original and optimized"
	@echo "  help:       Show this help message"
